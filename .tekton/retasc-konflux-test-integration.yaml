kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: check-endpoint-output
spec:
  params:
    - description: 'Snapshot of the application'
      name: SNAPSHOT
      default: |-
        {
          "components": [
            {
              "name": "retasc-konflux-test",
              "containerImage": "quay.io/redhat-user-workloads/rh-ee-lholecek-tenant/retasc-konflux-test/retasc-konflux-test:latest"
            }
          ]
        }
      type: string
    - description: 'Namespace where the application is running'
      name: NAMESPACE
      default: "default"
      type: string
    - description: 'Tested endpoint'
      name: ENDPOINT
      default: "/api/v1/hello"
      type: string
    - description: 'Expected output'
      name: EXPECTED_OUTPUT
      default: '{"message":"Hello"}'
      type: string
  workspaces:
  - name: cluster-credentials
    optional: true
  tasks:
    - name: task-1
      description: curl application endpoint, looking for certain text
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: NAMESPACE
          value: $(params.NAMESPACE)
        - name: ENDPOINT
          value: $(params.ENDPOINT)
        - name: EXPECTED_OUTPUT
          value: $(params.EXPECTED_OUTPUT)
      workspaces:
        - name: cluster-credentials
          optional: true
      taskSpec:
        params:
        - name: SNAPSHOT
        - name: NAMESPACE
        - name: ENDPOINT
        - name: EXPECTED_OUTPUT
        results:
        - name: TEST_OUTPUT
          description: Test output
        workspaces:
        - name: cluster-credentials
          workspace: cluster-credentials
        steps:
        - image: registry.redhat.io/openshift4/ose-cli:latest
          env:
          - name: SNAPSHOT
            value: $(params.SNAPSHOT)
          - name: NAMESPACE
            value: $(params.NAMESPACE)
          - name: ENDPOINT
            value: $(params.ENDPOINT)
          - name: EXPECTED_OUTPUT
            value: $(params.EXPECTED_OUTPUT)
          script: |
            dnf -y install jq

            # Get credentials to the namespace where the app is deployed
            export KUBECONFIG=$(workspaces.cluster-credentials.path)/kubeconfig

            # Use credentials to get the route for the application endpoint
            COMPONENT_NAME=$(echo -n ${SNAPSHOT} | jq -r .components[0].name)
            ROUTE_NAME=$(oc get routes -l app.kubernetes.io/name="${COMPONENT_NAME}" -o name)
            HOST=$(oc get "${ROUTE_NAME}" -o jsonpath={.spec.host} -n "${NAMESPACE}")
            URL="https://${HOST}${ENDPOINT}"
            echo "Found target host ${HOST} for app ${APPLICATION_NAME}"

            for _ in $(seq 1 20); do
              echo "Checking $URL"
              ENDPOINT_OUTPUT=$(curl -s "$URL")
              if [[ "${ENDPOINT_OUTPUT}" == "${EXPECTED_OUTPUT}" ]]; then
                RESULT="SUCCESS"
                break
              else
                RESULT="FAILURE"
              fi
              sleep 5
            done

            echo -e "The endpoint outputs the following:\n ${ENDPOINT_OUTPUT}"
            echo -e "Expected endpoint output:\n ${EXPECTED_OUTPUT}"

            TEST_OUTPUT=$(jq -rc --arg date $(date +%s) --arg RESULT "${RESULT}" --null-input \
              '{result: $RESULT, timestamp: $date, failures: 0, successes: 0, warnings: 0}')
            echo -n "${TEST_OUTPUT}" | tee $(results.TEST_OUTPUT.path)
            if [[ "$RESULT" != "SUCCESS" ]]; then
              exit 1
            fi
